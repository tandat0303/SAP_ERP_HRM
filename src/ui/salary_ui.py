import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
import calendar
from src.logic.salary import SalaryManager


class SalaryUI:
    def __init__(self, parent):
        self.parent = parent
        self.salary_mgr = SalaryManager()

        self.setup_styles()
        self.create_layout()
        self.load_salary_data()

    def setup_styles(self):
        """C·∫•u h√¨nh styles"""
        style = ttk.Style()

        style.configure("Title.TLabel",
                        font=("Arial", 20, "bold"),
                        background="#ecf0f1",
                        foreground="#2c3e50")

        style.configure("Highlight.TLabel",
                        font=("Arial", 12, "bold"),
                        background="#3498db",
                        foreground="white")

    def create_layout(self):
        """T·∫°o layout ch√≠nh"""
        main_frame = ttk.Frame(self.parent, style="Content.TFrame")
        main_frame.pack(fill="both", expand=True)

        # Title
        title = ttk.Label(main_frame, text="üí∞ B√ÅO C√ÅO L∆Ø∆†NG", style="Title.TLabel")
        title.pack(pady=(0, 30))

        # Create notebook for tabs
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill="both", expand=True, padx=20)

        # Tab 1: Salary Report
        report_tab = ttk.Frame(notebook)
        notebook.add(report_tab, text="B√°o c√°o l∆∞∆°ng")

        # Tab 2: Payroll Calculation
        payroll_tab = ttk.Frame(notebook)
        notebook.add(payroll_tab, text="T√≠nh l∆∞∆°ng")

        # Tab 3: Salary Analysis
        analysis_tab = ttk.Frame(notebook)
        notebook.add(analysis_tab, text="Ph√¢n t√≠ch l∆∞∆°ng")

        self.create_report_tab(report_tab)
        self.create_payroll_tab(payroll_tab)
        self.create_analysis_tab(analysis_tab)

    def create_report_tab(self, parent):
        """T·∫°o tab b√°o c√°o l∆∞∆°ng"""
        container = ttk.Frame(parent, padding=20)
        container.pack(fill="both", expand=True)

        # Filter section
        filter_frame = ttk.LabelFrame(container, text="B·ªô l·ªçc b√°o c√°o", padding=15)
        filter_frame.pack(fill="x", pady=(0, 20))

        # Month/Year selection
        ttk.Label(filter_frame, text="Th√°ng:").grid(row=0, column=0, sticky="w", padx=(0, 10))
        self.month_var = tk.StringVar(value=str(datetime.now().month))
        month_combo = ttk.Combobox(filter_frame, textvariable=self.month_var, width=10,
                                   values=[str(i) for i in range(1, 13)])
        month_combo.grid(row=0, column=1, padx=(0, 20))
        month_combo.state(['readonly'])

        ttk.Label(filter_frame, text="NƒÉm:").grid(row=0, column=2, sticky="w", padx=(0, 10))
        self.year_var = tk.StringVar(value=str(datetime.now().year))
        year_combo = ttk.Combobox(filter_frame, textvariable=self.year_var, width=10,
                                  values=[str(i) for i in range(2020, 2030)])
        year_combo.grid(row=0, column=3, padx=(0, 20))
        year_combo.state(['readonly'])

        # Department filter
        ttk.Label(filter_frame, text="Ph√≤ng ban:").grid(row=0, column=4, sticky="w", padx=(0, 10))
        self.dept_filter_var = tk.StringVar(value="T·∫•t c·∫£")
        dept_combo = ttk.Combobox(filter_frame, textvariable=self.dept_filter_var, width=15,
                                  values=["T·∫•t c·∫£", "IT", "HR", "K·∫ø to√°n", "Marketing", "B√°n h√†ng"])
        dept_combo.grid(row=0, column=5, padx=(0, 20))
        dept_combo.state(['readonly'])

        # Action buttons
        ttk.Button(filter_frame, text="üìä Xem b√°o c√°o l∆∞∆°ng",
                   command=self.open_salary_report_window).grid(row=0, column=6, padx=10)
        ttk.Button(filter_frame, text="üìà Xem th·ªëng k√™ t·ªïng quan",
                   command=self.open_statistics_window).grid(row=0, column=7, padx=5)

        # Quick actions section
        actions_frame = ttk.LabelFrame(container, text="Thao t√°c nhanh", padding=15)
        actions_frame.pack(fill="x", pady=(0, 20))

        # Quick action buttons
        quick_buttons = [
            ("üìã B√°o c√°o th√°ng hi·ªán t·∫°i", self.open_current_month_report),
            ("üìä So s√°nh theo ph√≤ng ban", self.open_department_comparison),
            ("üìà Xu h∆∞·ªõng l∆∞∆°ng 6 th√°ng", self.open_salary_trend),
            ("üí∞ Top l∆∞∆°ng cao nh·∫•t", self.open_top_salaries)
        ]

        for i, (text, command) in enumerate(quick_buttons):
            btn = ttk.Button(actions_frame, text=text, command=command, width=25)
            btn.grid(row=i // 2, column=i % 2, padx=10, pady=5, sticky="ew")

        # Configure grid weights
        actions_frame.grid_columnconfigure(0, weight=1)
        actions_frame.grid_columnconfigure(1, weight=1)

        # Info section
        info_frame = ttk.LabelFrame(container, text="H∆∞·ªõng d·∫´n", padding=15)
        info_frame.pack(fill="both", expand=True)

        info_text = """
üìã H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:

‚Ä¢ Ch·ªçn th√°ng, nƒÉm v√† ph√≤ng ban ƒë·ªÉ l·ªçc d·ªØ li·ªáu
‚Ä¢ Nh·∫•n "Xem b√°o c√°o l∆∞∆°ng" ƒë·ªÉ m·ªü b·∫£ng l∆∞∆°ng chi ti·∫øt
‚Ä¢ Nh·∫•n "Xem th·ªëng k√™ t·ªïng quan" ƒë·ªÉ xem c√°c ch·ªâ s·ªë t·ªïng h·ª£p
‚Ä¢ S·ª≠ d·ª•ng c√°c n√∫t thao t√°c nhanh ƒë·ªÉ xem b√°o c√°o ƒë·∫∑c bi·ªát

üí° M·∫∏O:
‚Ä¢ B√°o c√°o s·∫Ω m·ªü trong c·ª≠a s·ªï ri√™ng ƒë·ªÉ d·ªÖ d√†ng so s√°nh
‚Ä¢ C√≥ th·ªÉ xu·∫•t d·ªØ li·ªáu ra Excel t·ª´ c·ª≠a s·ªï b√°o c√°o
‚Ä¢ S·ª≠ d·ª•ng Ctrl+F ƒë·ªÉ t√¨m ki·∫øm trong b·∫£ng l∆∞∆°ng
        """

        info_label = ttk.Label(info_frame, text=info_text, font=("Arial", 10), justify="left")
        info_label.pack(anchor="w")

    def create_payroll_tab(self, parent):
        """T·∫°o tab t√≠nh l∆∞∆°ng"""
        container = ttk.Frame(parent, padding=20)
        container.pack(fill="both", expand=True)

        # Employee selection
        select_frame = ttk.LabelFrame(container, text="Ch·ªçn nh√¢n vi√™n", padding=15)
        select_frame.pack(fill="x", pady=(0, 20))

        ttk.Label(select_frame, text="M√£ nh√¢n vi√™n:").grid(row=0, column=0, sticky="w", padx=(0, 10))
        self.payroll_employee_var = tk.StringVar()
        employee_combo = ttk.Combobox(select_frame, textvariable=self.payroll_employee_var, width=20)
        employee_combo.grid(row=0, column=1, padx=(0, 20))

        ttk.Button(select_frame, text="üîç T·∫£i th√¥ng tin", command=self.load_employee_info).grid(row=0, column=2, padx=10)

        # Payroll calculation form
        calc_frame = ttk.LabelFrame(container, text="T√≠nh to√°n l∆∞∆°ng", padding=20)
        calc_frame.pack(fill="both", expand=True)

        # Left panel - Input
        left_panel = ttk.Frame(calc_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 20))

        # Basic salary info
        ttk.Label(left_panel, text="Th√¥ng tin c∆° b·∫£n:", font=("Arial", 12, "bold")).grid(row=0, column=0, columnspan=2,
                                                                                         sticky="w", pady=(0, 10))

        fields = [
            ("L∆∞∆°ng c∆° b·∫£n:", "basic_salary"),
            ("S·ªë ng√†y l√†m vi·ªác:", "work_days"),
            ("S·ªë ng√†y ngh·ªâ:", "absent_days"),
            ("Gi·ªù l√†m th√™m:", "overtime_hours"),
            ("Ph·ª• c·∫•p ƒÉn tr∆∞a:", "lunch_allowance"),
            ("Ph·ª• c·∫•p xƒÉng xe:", "transport_allowance"),
            ("Th∆∞·ªüng hi·ªáu su·∫•t:", "performance_bonus"),
            ("Kh·∫•u tr·ª´ BHXH:", "social_insurance"),
            ("Kh·∫•u tr·ª´ thu·∫ø:", "tax_deduction"),
            ("Kh·∫•u tr·ª´ kh√°c:", "other_deductions")
        ]

        self.payroll_entries = {}
        for i, (label_text, field_name) in enumerate(fields):
            row = i + 1
            ttk.Label(left_panel, text=label_text).grid(row=row, column=0, sticky="w", pady=5, padx=(0, 10))
            entry = ttk.Entry(left_panel, width=15, font=("Arial", 11))
            entry.grid(row=row, column=1, pady=5)
            self.payroll_entries[field_name] = entry

            # Set default values
            if field_name in ["work_days"]:
                entry.insert(0, "22")
            elif field_name in ["absent_days", "overtime_hours"]:
                entry.insert(0, "0")
            elif field_name in ["social_insurance"]:
                entry.insert(0, "8")  # 8% BHXH
            elif field_name in ["tax_deduction"]:
                entry.insert(0, "10")  # 10% thu·∫ø

        # Calculation buttons
        btn_frame = ttk.Frame(left_panel)
        btn_frame.grid(row=len(fields) + 1, column=0, columnspan=2, pady=20)

        ttk.Button(btn_frame, text="üßÆ T√≠nh l∆∞∆°ng", command=self.calculate_salary).pack(side="left", padx=5)
        ttk.Button(btn_frame, text="üìã Xem chi ti·∫øt", command=self.open_payroll_detail_window).pack(side="left", padx=5)

        # Right panel - Quick result
        right_panel = ttk.LabelFrame(calc_frame, text="K·∫øt qu·∫£ nhanh", padding=15)
        right_panel.pack(side="right", fill="both", expand=True)

        # Quick result display
        self.quick_result_frame = ttk.Frame(right_panel)
        self.quick_result_frame.pack(fill="both", expand=True)

        # Result labels
        self.result_labels = {}
        result_items = [
            ("L∆∞∆°ng c∆° b·∫£n:", "basic_salary"),
            ("T·ªïng thu nh·∫≠p:", "gross_salary"),
            ("T·ªïng kh·∫•u tr·ª´:", "total_deductions"),
            ("Th·ª±c lƒ©nh:", "net_salary")
        ]

        for i, (label_text, key) in enumerate(result_items):
            ttk.Label(self.quick_result_frame, text=label_text, font=("Arial", 11, "bold")).grid(row=i, column=0,
                                                                                                 sticky="w", pady=5)
            value_label = ttk.Label(self.quick_result_frame, text="0 ‚Ç´", font=("Arial", 11), foreground="#2c3e50")
            value_label.grid(row=i, column=1, sticky="e", pady=5, padx=(10, 0))
            self.result_labels[key] = value_label

        # Save button
        ttk.Button(right_panel, text="üíæ L∆∞u b·∫£ng l∆∞∆°ng", command=self.save_payroll).pack(pady=10)

    def create_analysis_tab(self, parent):
        """T·∫°o tab ph√¢n t√≠ch l∆∞∆°ng"""
        container = ttk.Frame(parent, padding=20)
        container.pack(fill="both", expand=True)

        # Analysis options
        options_frame = ttk.LabelFrame(container, text="T√πy ch·ªçn ph√¢n t√≠ch", padding=15)
        options_frame.pack(fill="x", pady=(0, 20))

        ttk.Label(options_frame, text="Lo·∫°i ph√¢n t√≠ch:").grid(row=0, column=0, sticky="w", padx=(0, 10))
        self.analysis_type_var = tk.StringVar(value="Theo ph√≤ng ban")
        analysis_combo = ttk.Combobox(options_frame, textvariable=self.analysis_type_var, width=20,
                                      values=["Theo ph√≤ng ban", "Theo th√¢m ni√™n", "Theo m·ª©c l∆∞∆°ng", "Xu h∆∞·ªõng l∆∞∆°ng"])
        analysis_combo.grid(row=0, column=1, padx=(0, 20))
        analysis_combo.state(['readonly'])

        ttk.Button(options_frame, text="üìà Xem ph√¢n t√≠ch", command=self.open_analysis_window).grid(row=0, column=2,
                                                                                                  padx=10)

        # Analysis shortcuts
        shortcuts_frame = ttk.LabelFrame(container, text="Ph√¢n t√≠ch nhanh", padding=15)
        shortcuts_frame.pack(fill="x", pady=(0, 20))

        analysis_buttons = [
            ("üìä Ph√¢n t√≠ch theo ph√≤ng ban", lambda: self.open_specific_analysis("Theo ph√≤ng ban")),
            ("‚è∞ Ph√¢n t√≠ch theo th√¢m ni√™n", lambda: self.open_specific_analysis("Theo th√¢m ni√™n")),
            ("üí∞ Ph√¢n t√≠ch theo m·ª©c l∆∞∆°ng", lambda: self.open_specific_analysis("Theo m·ª©c l∆∞∆°ng")),
            ("üìà Xu h∆∞·ªõng l∆∞∆°ng", lambda: self.open_specific_analysis("Xu h∆∞·ªõng l∆∞∆°ng"))
        ]

        for i, (text, command) in enumerate(analysis_buttons):
            btn = ttk.Button(shortcuts_frame, text=text, command=command, width=25)
            btn.grid(row=i // 2, column=i % 2, padx=10, pady=5, sticky="ew")

        shortcuts_frame.grid_columnconfigure(0, weight=1)
        shortcuts_frame.grid_columnconfigure(1, weight=1)

        # Charts placeholder
        charts_frame = ttk.LabelFrame(container, text="Bi·ªÉu ƒë·ªì v√† th·ªëng k√™", padding=15)
        charts_frame.pack(fill="both", expand=True)

        chart_placeholder = ttk.Label(charts_frame,
                                      text="üìä C√°c bi·ªÉu ƒë·ªì ph√¢n t√≠ch s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong c·ª≠a s·ªï ri√™ng\n\n" +
                                           "üí° Nh·∫•n c√°c n√∫t ph√¢n t√≠ch ·ªü tr√™n ƒë·ªÉ xem chi ti·∫øt\n" +
                                           "üìà H·ªó tr·ª£ xu·∫•t d·ªØ li·ªáu v√† in ·∫•n",
                                      font=("Arial", 12),
                                      justify="center")
        chart_placeholder.pack(expand=True)

    # Window creation methods
    def open_salary_report_window(self):
        """M·ªü c·ª≠a s·ªï b√°o c√°o l∆∞∆°ng"""
        try:
            month = int(self.month_var.get())
            year = int(self.year_var.get())
            dept_filter = self.dept_filter_var.get()

            # Create new window
            report_window = tk.Toplevel(self.parent)
            report_window.title(f"B√°o c√°o l∆∞∆°ng th√°ng {month}/{year}")
            report_window.geometry("1000x600")
            report_window.resizable(True, True)

            # Window icon and properties
            report_window.transient(self.parent)
            report_window.grab_set()

            # Main frame
            main_frame = ttk.Frame(report_window, padding=10)
            main_frame.pack(fill="both", expand=True)

            # Header
            header_frame = ttk.Frame(main_frame)
            header_frame.pack(fill="x", pady=(0, 10))

            title_label = ttk.Label(header_frame,
                                    text=f"üìä B√ÅO C√ÅO L∆Ø∆†NG TH√ÅNG {month}/{year}",
                                    font=("Arial", 16, "bold"))
            title_label.pack(side="left")

            # Export button
            export_btn = ttk.Button(header_frame, text="üì§ Xu·∫•t Excel",
                                    command=lambda: self.export_salary_report(month, year, dept_filter))
            export_btn.pack(side="right")

            # Filter info
            filter_info = f"Ph√≤ng ban: {dept_filter}"
            ttk.Label(main_frame, text=filter_info, font=("Arial", 10)).pack(anchor="w")

            # Treeview for salary data
            tree_frame = ttk.Frame(main_frame)
            tree_frame.pack(fill="both", expand=True, pady=(10, 0))

            columns = ("M√£ NV", "T√™n", "Ph√≤ng ban", "L∆∞∆°ng c∆° b·∫£n", "Ph·ª• c·∫•p", "Th∆∞·ªüng", "Kh·∫•u tr·ª´", "Th·ª±c lƒ©nh")
            tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=20)

            # Configure columns
            column_widths = {
                "M√£ NV": 80, "T√™n": 150, "Ph√≤ng ban": 120, "L∆∞∆°ng c∆° b·∫£n": 120,
                "Ph·ª• c·∫•p": 100, "Th∆∞·ªüng": 100, "Kh·∫•u tr·ª´": 100, "Th·ª±c lƒ©nh": 120
            }

            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=column_widths.get(col, 100), anchor="center")

            # Scrollbars
            v_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
            h_scrollbar = ttk.Scrollbar(tree_frame, orient="horizontal", command=tree.xview)
            tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

            tree.grid(row=0, column=0, sticky="nsew")
            v_scrollbar.grid(row=0, column=1, sticky="ns")
            h_scrollbar.grid(row=1, column=0, sticky="ew")

            tree_frame.grid_rowconfigure(0, weight=1)
            tree_frame.grid_columnconfigure(0, weight=1)

            # Load data
            self.load_salary_report_data(tree, month, year, dept_filter)

            # Summary frame
            summary_frame = ttk.LabelFrame(main_frame, text="T·ªïng k·∫øt", padding=10)
            summary_frame.pack(fill="x", pady=(10, 0))

            # Calculate and display summary
            self.display_salary_summary(summary_frame, tree)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü b√°o c√°o l∆∞∆°ng: {str(e)}")

    def open_statistics_window(self):
        """M·ªü c·ª≠a s·ªï th·ªëng k√™ t·ªïng quan"""
        try:
            month = int(self.month_var.get())
            year = int(self.year_var.get())

            # Create new window
            stats_window = tk.Toplevel(self.parent)
            stats_window.title(f"Th·ªëng k√™ l∆∞∆°ng th√°ng {month}/{year}")
            stats_window.geometry("800x500")
            stats_window.resizable(True, True)

            stats_window.transient(self.parent)
            stats_window.grab_set()

            # Main frame
            main_frame = ttk.Frame(stats_window, padding=20)
            main_frame.pack(fill="both", expand=True)

            # Title
            title_label = ttk.Label(main_frame,
                                    text=f"üìà TH·ªêNG K√ä L∆Ø∆†NG TH√ÅNG {month}/{year}",
                                    font=("Arial", 16, "bold"))
            title_label.pack(pady=(0, 20))

            # Stats cards frame
            cards_frame = ttk.Frame(main_frame)
            cards_frame.pack(fill="x", pady=(0, 20))

            # Get statistics
            stats = self.salary_mgr.get_salary_statistics(month, year)

            # Create stat cards
            stat_cards = [
                ("üë• T·ªïng nh√¢n vi√™n", f"{stats.get('total_employees', 0)}", "#3498db"),
                ("üí∞ T·ªïng chi l∆∞∆°ng", f"{stats.get('total_salary', 0):,.0f} ‚Ç´", "#e74c3c"),
                ("üìä L∆∞∆°ng trung b√¨nh", f"{stats.get('avg_salary', 0):,.0f} ‚Ç´", "#f39c12"),
                ("üèÜ L∆∞∆°ng cao nh·∫•t", f"{stats.get('max_salary', 0):,.0f} ‚Ç´", "#27ae60")
            ]

            for i, (title, value, color) in enumerate(stat_cards):
                card = ttk.LabelFrame(cards_frame, text=title, padding=15)
                card.grid(row=0, column=i, padx=10, sticky="ew")

                value_label = ttk.Label(card, text=value, font=("Arial", 14, "bold"))
                value_label.pack()

                cards_frame.grid_columnconfigure(i, weight=1)

            # Department breakdown
            dept_frame = ttk.LabelFrame(main_frame, text="Ph√¢n t√≠ch theo ph√≤ng ban", padding=15)
            dept_frame.pack(fill="both", expand=True)

            # Department treeview
            dept_columns = ("Ph√≤ng ban", "S·ªë NV", "T·ªïng l∆∞∆°ng", "L∆∞∆°ng TB")
            dept_tree = ttk.Treeview(dept_frame, columns=dept_columns, show="headings", height=10)

            for col in dept_columns:
                dept_tree.heading(col, text=col)
                dept_tree.column(col, width=150, anchor="center")

            # Load department data
            dept_data = stats.get('by_department', [])
            for dept_info in dept_data:
                dept_tree.insert("", "end", values=(
                    dept_info[0],  # department
                    dept_info[1],  # emp_count
                    f"{dept_info[2]:,.0f} ‚Ç´",  # total_salary
                    f"{dept_info[3]:,.0f} ‚Ç´"  # avg_salary
                ))

            dept_tree.pack(fill="both", expand=True)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü th·ªëng k√™: {str(e)}")

    def open_payroll_detail_window(self):
        """M·ªü c·ª≠a s·ªï chi ti·∫øt b·∫£ng l∆∞∆°ng"""
        if not hasattr(self, 'current_calculation'):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng t√≠nh l∆∞∆°ng tr∆∞·ªõc!")
            return

        try:
            # Create new window
            detail_window = tk.Toplevel(self.parent)
            detail_window.title("Chi ti·∫øt b·∫£ng l∆∞∆°ng")
            detail_window.geometry("600x700")
            detail_window.resizable(False, False)

            detail_window.transient(self.parent)
            detail_window.grab_set()

            # Main frame
            main_frame = ttk.Frame(detail_window, padding=20)
            main_frame.pack(fill="both", expand=True)

            # Title
            title_label = ttk.Label(main_frame,
                                    text="üìã CHI TI·∫æT B·∫¢NG L∆Ø∆†NG",
                                    font=("Arial", 16, "bold"))
            title_label.pack(pady=(0, 20))

            # Detailed calculation display
            calc = self.current_calculation

            detail_text = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           B·∫¢NG T√çNH L∆Ø∆†NG            ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë TH√îNG TIN C∆† B·∫¢N:                    ‚ïë
‚ïë ‚Ä¢ M√£ nh√¢n vi√™n: {calc['employee_id']:>17} ‚ïë
‚ïë ‚Ä¢ Th√°ng/NƒÉm: {calc['month']:>2}/{calc['year']:<15} ‚ïë
‚ïë ‚Ä¢ L∆∞∆°ng c∆° b·∫£n: {calc['basic_salary']:>15,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Ng√†y l√†m vi·ªác: {calc['work_days']:>14} ng√†y ‚ïë
‚ïë ‚Ä¢ Ng√†y ngh·ªâ: {calc['absent_days']:>18} ng√†y ‚ïë
‚ïë ‚Ä¢ Gi·ªù l√†m th√™m: {calc['overtime_hours']:>15} gi·ªù ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë T√çNH TO√ÅN L∆Ø∆†NG:                     ‚ïë
‚ïë ‚Ä¢ Ti·ªÅn l√†m th√™m: {calc['overtime_pay']:>13,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Ph·ª• c·∫•p ƒÉn tr∆∞a: {calc['lunch_allowance']:>11,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Ph·ª• c·∫•p xƒÉng xe: {calc['transport_allowance']:>11,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Th∆∞·ªüng hi·ªáu su·∫•t: {calc['performance_bonus']:>10,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Th∆∞·ªüng kh√°c: {calc.get('other_bonus', 0):>15,.0f} ‚Ç´ ‚ïë
‚ïë                                      ‚ïë
‚ïë T·ªîNG L∆Ø∆†NG TR∆Ø·ªöC KH·∫§U TR·ª™: {calc['gross_salary']:>7,.0f} ‚Ç´ ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë KH·∫§U TR·ª™:                            ‚ïë
‚ïë ‚Ä¢ BHXH: {calc['social_insurance']:>23,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ BHYT: {calc.get('health_insurance', 0):>23,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ BHTN: {calc.get('unemployment_insurance', 0):>23,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Thu·∫ø TNCN: {calc['tax_deduction']:>17,.0f} ‚Ç´ ‚ïë
‚ïë ‚Ä¢ Kh·∫•u tr·ª´ kh√°c: {calc['other_deductions']:>13,.0f} ‚Ç´ ‚ïë
‚ïë                                      ‚ïë
‚ïë T·ªîNG KH·∫§U TR·ª™: {calc['total_deductions']:>17,.0f} ‚Ç´ ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë L∆Ø∆†NG TH·ª∞C Lƒ®NH: {calc['net_salary']:>15,.0f} ‚Ç´ ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """

            # Text widget to display calculation
            text_widget = tk.Text(main_frame, font=("Courier", 10), height=30, width=50)
            text_widget.pack(fill="both", expand=True)
            text_widget.insert("1.0", detail_text)
            text_widget.config(state="disabled")

            # Buttons frame
            btn_frame = ttk.Frame(main_frame)
            btn_frame.pack(fill="x", pady=(10, 0))

            ttk.Button(btn_frame, text="üíæ L∆∞u b·∫£ng l∆∞∆°ng",
                       command=lambda: self.save_payroll_from_window(detail_window)).pack(side="left", padx=5)
            ttk.Button(btn_frame, text="üñ®Ô∏è In b·∫£ng l∆∞∆°ng",
                       command=self.print_payroll).pack(side="left", padx=5)
            ttk.Button(btn_frame, text="üì§ Xu·∫•t PDF",
                       command=self.export_payroll_pdf).pack(side="left", padx=5)
            ttk.Button(btn_frame, text="‚ùå ƒê√≥ng",
                       command=detail_window.destroy).pack(side="right", padx=5)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü chi ti·∫øt b·∫£ng l∆∞∆°ng: {str(e)}")

    def open_analysis_window(self):
        """M·ªü c·ª≠a s·ªï ph√¢n t√≠ch"""
        analysis_type = self.analysis_type_var.get()
        self.open_specific_analysis(analysis_type)

    def open_specific_analysis(self, analysis_type):
        """M·ªü c·ª≠a s·ªï ph√¢n t√≠ch c·ª• th·ªÉ"""
        try:
            # Create new window
            analysis_window = tk.Toplevel(self.parent)
            analysis_window.title(f"Ph√¢n t√≠ch l∆∞∆°ng - {analysis_type}")
            analysis_window.geometry("800x600")
            analysis_window.resizable(True, True)

            analysis_window.transient(self.parent)
            analysis_window.grab_set()

            # Main frame
            main_frame = ttk.Frame(analysis_window, padding=20)
            main_frame.pack(fill="both", expand=True)

            # Title
            title_label = ttk.Label(main_frame,
                                    text=f"üìà PH√ÇN T√çCH L∆Ø∆†NG - {analysis_type.upper()}",
                                    font=("Arial", 16, "bold"))
            title_label.pack(pady=(0, 20))

            # Analysis content
            analysis_frame = ttk.Frame(main_frame)
            analysis_frame.pack(fill="both", expand=True)

            # Get analysis data
            analysis_result = self.get_analysis_data(analysis_type)

            # Display analysis
            analysis_text = tk.Text(analysis_frame, font=("Courier", 11), wrap=tk.WORD)
            analysis_scrollbar = ttk.Scrollbar(analysis_frame, orient="vertical", command=analysis_text.yview)
            analysis_text.configure(yscrollcommand=analysis_scrollbar.set)

            analysis_text.pack(side="left", fill="both", expand=True)
            analysis_scrollbar.pack(side="right", fill="y")

            analysis_text.insert("1.0", analysis_result)
            analysis_text.config(state="disabled")

            # Buttons frame
            btn_frame = ttk.Frame(main_frame)
            btn_frame.pack(fill="x", pady=(10, 0))

            ttk.Button(btn_frame, text="üì§ Xu·∫•t b√°o c√°o",
                       command=lambda: self.export_analysis(analysis_type)).pack(side="left", padx=5)
            ttk.Button(btn_frame, text="üñ®Ô∏è In b√°o c√°o",
                       command=lambda: self.print_analysis(analysis_type)).pack(side="left", padx=5)
            ttk.Button(btn_frame, text="‚ùå ƒê√≥ng",
                       command=analysis_window.destroy).pack(side="right", padx=5)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü ph√¢n t√≠ch: {str(e)}")

    # Quick action methods
    def open_current_month_report(self):
        """M·ªü b√°o c√°o th√°ng hi·ªán t·∫°i"""
        self.month_var.set(str(datetime.now().month))
        self.year_var.set(str(datetime.now().year))
        self.dept_filter_var.set("T·∫•t c·∫£")
        self.open_salary_report_window()

    def open_department_comparison(self):
        """M·ªü so s√°nh theo ph√≤ng ban"""
        self.open_specific_analysis("Theo ph√≤ng ban")

    def open_salary_trend(self):
        """M·ªü xu h∆∞·ªõng l∆∞∆°ng 6 th√°ng"""
        self.open_specific_analysis("Xu h∆∞·ªõng l∆∞∆°ng")

    def open_top_salaries(self):
        """M·ªü top l∆∞∆°ng cao nh·∫•t"""
        try:
            # Create new window
            top_window = tk.Toplevel(self.parent)
            top_window.title("Top l∆∞∆°ng cao nh·∫•t")
            top_window.geometry("600x400")
            top_window.resizable(True, True)

            top_window.transient(self.parent)
            top_window.grab_set()

            # Main frame
            main_frame = ttk.Frame(top_window, padding=20)
            main_frame.pack(fill="both", expand=True)

            # Title
            title_label = ttk.Label(main_frame,
                                    text="üèÜ TOP L∆Ø∆†NG CAO NH·∫§T",
                                    font=("Arial", 16, "bold"))
            title_label.pack(pady=(0, 20))

            # Top salaries treeview
            columns = ("H·∫°ng", "M√£ NV", "T√™n", "Ph√≤ng ban", "L∆∞∆°ng")
            tree = ttk.Treeview(main_frame, columns=columns, show="headings", height=15)

            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=100, anchor="center")

            # Load top salary data (sample)
            sample_data = [
                (1, "EMP001", "Nguy·ªÖn VƒÉn A", "IT", "35,000,000"),
                (2, "EMP002", "Tr·∫ßn Th·ªã B", "IT", "32,000,000"),
                (3, "EMP003", "L√™ VƒÉn C", "Marketing", "30,000,000"),
                (4, "EMP004", "Ph·∫°m Th·ªã D", "HR", "28,000,000"),
                (5, "EMP005", "Ho√†ng VƒÉn E", "IT", "27,000,000")
            ]

            for data in sample_data:
                tree.insert("", "end", values=data)

            tree.pack(fill="both", expand=True)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü top l∆∞∆°ng: {str(e)}")

    # Helper methods
    def load_salary_report_data(self, tree, month, year, dept_filter):
        """Load d·ªØ li·ªáu b√°o c√°o l∆∞∆°ng v√†o treeview"""
        try:
            # Clear existing items
            for item in tree.get_children():
                tree.delete(item)

            # Get report data from SalaryManager
            report_data = self.salary_mgr.get_monthly_payroll_report(month, year, dept_filter)

            for payroll in report_data:
                if len(payroll) >= 24:  # Ensure we have enough data
                    emp_id = payroll[2]  # employee_id
                    name = payroll[-2]  # name t·ª´ JOIN
                    dept = payroll[-1]  # department t·ª´ JOIN
                    basic_salary = payroll[4]
                    gross_salary = payroll[16]
                    net_salary = payroll[23]

                    # Calculate components
                    allowance = payroll[10] + payroll[11] + payroll[12]  # t·ªïng ph·ª• c·∫•p
                    bonus = payroll[13] + payroll[14]  # t·ªïng th∆∞·ªüng
                    deduction = payroll[22]  # t·ªïng kh·∫•u tr·ª´

                    tree.insert("", "end", values=(
                        emp_id, name, dept,
                        f"{basic_salary:,.0f}",
                        f"{allowance:,.0f}",
                        f"{bonus:,.0f}",
                        f"{deduction:,.0f}",
                        f"{net_salary:,.0f}"
                    ))

        except Exception as e:
            # Fallback to sample data
            sample_data = [
                ("EMP001", "Nguy·ªÖn VƒÉn A", "IT", "20,000,000", "2,000,000", "3,000,000", "5,000,000", "20,000,000"),
                ("EMP002", "Tr·∫ßn Th·ªã B", "HR", "18,000,000", "1,800,000", "2,000,000", "4,500,000", "17,300,000"),
                ("EMP003", "L√™ VƒÉn C", "Marketing", "22,000,000", "2,200,000", "4,000,000", "5,500,000", "22,700,000")
            ]

            for data in sample_data:
                tree.insert("", "end", values=data)

    def display_salary_summary(self, parent, tree):
        """Hi·ªÉn th·ªã t·ªïng k·∫øt l∆∞∆°ng"""
        try:
            # Calculate summary from tree data
            total_employees = len(tree.get_children())
            total_salary = 0

            for item in tree.get_children():
                values = tree.item(item)['values']
                if len(values) > 7:
                    try:
                        salary = float(values[7].replace(',', ''))
                        total_salary += salary
                    except:
                        pass

            avg_salary = total_salary / total_employees if total_employees > 0 else 0

            # Display summary
            summary_text = f"""
üìä T·ªîNG K·∫æT:
‚Ä¢ T·ªïng s·ªë nh√¢n vi√™n: {total_employees}
‚Ä¢ T·ªïng chi l∆∞∆°ng: {total_salary:,.0f} ‚Ç´
‚Ä¢ L∆∞∆°ng trung b√¨nh: {avg_salary:,.0f} ‚Ç´
            """

            summary_label = ttk.Label(parent, text=summary_text, font=("Arial", 10))
            summary_label.pack(anchor="w")

        except Exception as e:
            ttk.Label(parent, text="Kh√¥ng th·ªÉ t√≠nh t·ªïng k·∫øt", font=("Arial", 10)).pack()

    def get_analysis_data(self, analysis_type):
        """L·∫•y d·ªØ li·ªáu ph√¢n t√≠ch"""
        if analysis_type == "Theo ph√≤ng ban":
            return """
üìä PH√ÇN T√çCH L∆Ø∆†NG THEO PH√íNG BAN

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ PH√íNG BAN        ‚îÇ S·ªê NV ‚îÇ L∆Ø∆†NG TB    ‚îÇ T·ªîNG L∆Ø∆†NG      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ IT               ‚îÇ   15  ‚îÇ 25,000,000  ‚îÇ 375,000,000     ‚îÇ
‚îÇ HR               ‚îÇ    8  ‚îÇ 18,000,000  ‚îÇ 144,000,000     ‚îÇ
‚îÇ K·∫ø to√°n          ‚îÇ    6  ‚îÇ 20,000,000  ‚îÇ 120,000,000     ‚îÇ
‚îÇ Marketing        ‚îÇ   10  ‚îÇ 22,000,000  ‚îÇ 220,000,000     ‚îÇ
‚îÇ B√°n h√†ng         ‚îÇ   12  ‚îÇ 19,000,000  ‚îÇ 228,000,000     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà NH·∫¨N X√âT:
‚Ä¢ Ph√≤ng IT c√≥ m·ª©c l∆∞∆°ng trung b√¨nh cao nh·∫•t
‚Ä¢ Ph√≤ng HR c√≥ s·ªë l∆∞·ª£ng nh√¢n vi√™n √≠t nh·∫•t
‚Ä¢ T·ªïng chi ph√≠ l∆∞∆°ng: 1,087,000,000 VNƒê/th√°ng
‚Ä¢ M·ª©c l∆∞∆°ng trung b√¨nh to√†n c√¥ng ty: 21,294,118 VNƒê

üí° KHUY·∫æN NGH·ªä:
‚Ä¢ Xem x√©t tƒÉng l∆∞∆°ng cho ph√≤ng HR ƒë·ªÉ c√¢n b·∫±ng
‚Ä¢ Ph√≤ng IT ƒëang c√≥ m·ª©c l∆∞∆°ng c·∫°nh tranh t·ªët
‚Ä¢ C·∫ßn ƒë√°nh gi√° hi·ªáu su·∫•t ƒë·ªÉ ƒëi·ªÅu ch·ªânh l∆∞∆°ng ph√π h·ª£p
            """

        elif analysis_type == "Theo th√¢m ni√™n":
            return """
üìä PH√ÇN T√çCH L∆Ø∆†NG THEO TH√ÇM NI√äN

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ TH√ÇM NI√äN        ‚îÇ S·ªê NV ‚îÇ L∆Ø∆†NG TB    ‚îÇ % TƒÇNG/NƒÇM      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ < 1 nƒÉm          ‚îÇ   12  ‚îÇ 15,000,000  ‚îÇ -               ‚îÇ
‚îÇ 1-2 nƒÉm          ‚îÇ   18  ‚îÇ 18,500,000  ‚îÇ 23.3%           ‚îÇ
‚îÇ 3-5 nƒÉm          ‚îÇ   20  ‚îÇ 23,000,000  ‚îÇ 24.3%           ‚îÇ
‚îÇ 5-10 nƒÉm         ‚îÇ   15  ‚îÇ 28,000,000  ‚îÇ 21.7%           ‚îÇ
‚îÇ > 10 nƒÉm         ‚îÇ    6  ‚îÇ 35,000,000  ‚îÇ 25.0%           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà NH·∫¨N X√âT:
‚Ä¢ M·ª©c tƒÉng l∆∞∆°ng theo th√¢m ni√™n kh√° ƒë·ªÅu
‚Ä¢ Nh√¢n vi√™n m·ªõi chi·∫øm t·ª∑ l·ªá cao (42.3%)
‚Ä¢ C·∫ßn ch√∫ √Ω gi·ªØ ch√¢n nh√¢n vi√™n c√≥ kinh nghi·ªám

üí° KHUY·∫æN NGH·ªä:
‚Ä¢ X√¢y d·ª±ng ch∆∞∆°ng tr√¨nh retention cho nh√¢n vi√™n senior
‚Ä¢ TƒÉng c∆∞·ªùng ƒë√†o t·∫°o cho nh√¢n vi√™n m·ªõi
‚Ä¢ Xem x√©t bonus th√¢m ni√™n cho nh√¢n vi√™n l√¢u nƒÉm
            """

        elif analysis_type == "Theo m·ª©c l∆∞∆°ng":
            return """
üìä PH√ÇN T√çCH PH√ÇN B·ªê L∆Ø∆†NG

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ KHO·∫¢NG L∆Ø∆†NG     ‚îÇ S·ªê NV ‚îÇ T·ª∂ L·ªÜ %     ‚îÇ T·ªîNG L∆Ø∆†NG      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ < 15 tri·ªáu       ‚îÇ    8  ‚îÇ  11.3%      ‚îÇ  96,000,000     ‚îÇ
‚îÇ 15-20 tri·ªáu      ‚îÇ   25  ‚îÇ  35.2%      ‚îÇ 437,500,000     ‚îÇ
‚îÇ 20-25 tri·ªáu      ‚îÇ   18  ‚îÇ  25.4%      ‚îÇ 405,000,000     ‚îÇ
‚îÇ 25-30 tri·ªáu      ‚îÇ   12  ‚îÇ  16.9%      ‚îÇ 330,000,000     ‚îÇ
‚îÇ > 30 tri·ªáu       ‚îÇ    8  ‚îÇ  11.3%      ‚îÇ 280,000,000     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà NH·∫¨N X√âT:
‚Ä¢ Ph·∫ßn l·ªõn nh√¢n vi√™n c√≥ m·ª©c l∆∞∆°ng 15-25 tri·ªáu (60.6%)
‚Ä¢ Ch·ªâ c√≥ 11.3% nh√¢n vi√™n c√≥ m·ª©c l∆∞∆°ng > 30 tri·ªáu
‚Ä¢ C·∫ßn xem x√©t ƒëi·ªÅu ch·ªânh l∆∞∆°ng cho nh√≥m < 15 tri·ªáu

üí° KHUY·∫æN NGH·ªä:
‚Ä¢ X√¢y d·ª±ng thang l∆∞∆°ng r√µ r√†ng theo v·ªã tr√≠
‚Ä¢ ƒê√°nh gi√° th·ªã tr∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh c·∫°nh tranh
‚Ä¢ T·∫°o c∆° h·ªôi thƒÉng ti·∫øn cho nh√¢n vi√™n
            """

        else:  # Xu h∆∞·ªõng l∆∞∆°ng
            return """
üìä XU H∆Ø·ªöNG L∆Ø∆†NG THEO TH·ªúI GIAN

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ TH·ªúI GIAN        ‚îÇ L∆Ø∆†NG TB    ‚îÇ % TƒÇNG     ‚îÇ CH·ªà S·ªê CPI  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ 2020             ‚îÇ 16,500,000  ‚îÇ -          ‚îÇ 3.2%        ‚îÇ
‚îÇ 2021             ‚îÇ 18,200,000  ‚îÇ 10.3%      ‚îÇ 3.8%        ‚îÇ
‚îÇ 2022             ‚îÇ 19,800,000  ‚îÇ  8.8%      ‚îÇ 4.5%        ‚îÇ
‚îÇ 2023             ‚îÇ 21,300,000  ‚îÇ  7.6%      ‚îÇ 3.9%        ‚îÇ
‚îÇ 2024             ‚îÇ 23,500,000  ‚îÇ 10.3%      ‚îÇ 4.2%        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà NH·∫¨N X√âT:
‚Ä¢ M·ª©c tƒÉng l∆∞∆°ng trung b√¨nh h√†ng nƒÉm: 9.25%
‚Ä¢ M·ª©c tƒÉng l∆∞∆°ng lu√¥n cao h∆°n ch·ªâ s·ªë CPI
‚Ä¢ Xu h∆∞·ªõng tƒÉng l∆∞∆°ng ·ªïn ƒë·ªãnh qua c√°c nƒÉm

üí° KHUY·∫æN NGH·ªä:
‚Ä¢ Duy tr√¨ ch√≠nh s√°ch tƒÉng l∆∞∆°ng h√†ng nƒÉm
‚Ä¢ Theo d√µi ch·ªâ s·ªë l·∫°m ph√°t ƒë·ªÉ ƒëi·ªÅu ch·ªânh ph√π h·ª£p
‚Ä¢ Xem x√©t tƒÉng l∆∞∆°ng ƒë·ªôt xu·∫•t cho c√°c v·ªã tr√≠ quan tr·ªçng
            """

    # Calculation and data methods
    def load_employee_list(self):
        """Load danh s√°ch nh√¢n vi√™n cho combobox"""
        try:
            from ..logic.employee import EmployeeManager
            emp_mgr = EmployeeManager()
            employees = emp_mgr.get_all_employees()

            employee_list = [f"{emp[0]} - {emp[1]}" for emp in employees]

            # Update combobox values if it exists
            for widget in self.parent.winfo_children():
                if isinstance(widget, ttk.Combobox):
                    widget['values'] = employee_list
                    break

        except Exception as e:
            print(f"Error loading employees: {e}")

    def load_employee_info(self):
        """Load th√¥ng tin nh√¢n vi√™n ƒë∆∞·ª£c ch·ªçn"""
        selected = self.payroll_employee_var.get()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nh√¢n vi√™n!")
            return

        try:
            employee_id = selected.split(" - ")[0]

            from ..logic.employee import EmployeeManager
            emp_mgr = EmployeeManager()
            employee = emp_mgr.get_employee_by_id(employee_id)

            if employee:
                basic_salary = employee[3]  # salary field
                self.payroll_entries['basic_salary'].delete(0, tk.END)
                self.payroll_entries['basic_salary'].insert(0, str(basic_salary))

                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫£i th√¥ng tin nh√¢n vi√™n {employee_id}")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin nh√¢n vi√™n: {str(e)}")

    def calculate_salary(self):
        """T√≠nh to√°n l∆∞∆°ng"""
        try:
            # Get input values
            basic_salary = float(self.payroll_entries['basic_salary'].get() or 0)
            work_days = int(self.payroll_entries['work_days'].get() or 22)
            absent_days = int(self.payroll_entries['absent_days'].get() or 0)
            overtime_hours = float(self.payroll_entries['overtime_hours'].get() or 0)
            lunch_allowance = float(self.payroll_entries['lunch_allowance'].get() or 0)
            transport_allowance = float(self.payroll_entries['transport_allowance'].get() or 0)
            performance_bonus = float(self.payroll_entries['performance_bonus'].get() or 0)
            social_insurance_rate = float(self.payroll_entries['social_insurance'].get() or 8)
            tax_rate = float(self.payroll_entries['tax_deduction'].get() or 10)
            other_deductions = float(self.payroll_entries['other_deductions'].get() or 0)

            # Calculate using SalaryManager
            actual_work_days = work_days - absent_days
            payroll_data = self.salary_mgr.calculate_payroll(
                employee_id=self.payroll_employee_var.get().split(" - ")[0] if self.payroll_employee_var.get() else "",
                month=datetime.now().month,
                year=datetime.now().year,
                basic_salary=basic_salary,
                work_days=work_days,
                actual_work_days=actual_work_days,
                absent_days=absent_days,
                overtime_hours=overtime_hours,
                lunch_allowance=lunch_allowance,
                transport_allowance=transport_allowance,
                performance_bonus=performance_bonus,
                social_insurance_rate=social_insurance_rate,
                tax_rate=tax_rate,
                other_deductions=other_deductions
            )

            # Update quick result display
            self.result_labels['basic_salary'].config(text=f"{payroll_data['basic_salary']:,.0f} ‚Ç´")
            self.result_labels['gross_salary'].config(text=f"{payroll_data['gross_salary']:,.0f} ‚Ç´")
            self.result_labels['total_deductions'].config(text=f"{payroll_data['total_deductions']:,.0f} ‚Ç´")
            self.result_labels['net_salary'].config(text=f"{payroll_data['net_salary']:,.0f} ‚Ç´", foreground="#27ae60")

            # Store calculation results
            self.current_calculation = payroll_data

            messagebox.showinfo("Th√†nh c√¥ng", "T√≠nh l∆∞∆°ng th√†nh c√¥ng! Nh·∫•n 'Xem chi ti·∫øt' ƒë·ªÉ xem b·∫£ng l∆∞∆°ng ƒë·∫ßy ƒë·ªß.")

        except ValueError as e:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë!")
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))

    def save_payroll(self):
        """L∆∞u b·∫£ng l∆∞∆°ng"""
        if not hasattr(self, 'current_calculation'):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng t√≠nh l∆∞∆°ng tr∆∞·ªõc khi l∆∞u!")
            return

        try:
            payroll_id = self.salary_mgr.save_payroll(self.current_calculation)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u b·∫£ng l∆∞∆°ng v·ªõi m√£: {payroll_id}")
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))

    def save_payroll_from_window(self, window):
        """L∆∞u b·∫£ng l∆∞∆°ng t·ª´ c·ª≠a s·ªï chi ti·∫øt"""
        self.save_payroll()
        window.destroy()

    # Export and print methods
    def export_salary_report(self, month, year, dept_filter):
        """Xu·∫•t b√°o c√°o l∆∞∆°ng ra Excel"""
        messagebox.showinfo("Th√¥ng b√°o", f"Ch·ª©c nƒÉng xu·∫•t Excel b√°o c√°o th√°ng {month}/{year} s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")

    def export_analysis(self, analysis_type):
        """Xu·∫•t ph√¢n t√≠ch ra file"""
        messagebox.showinfo("Th√¥ng b√°o", f"Ch·ª©c nƒÉng xu·∫•t ph√¢n t√≠ch '{analysis_type}' s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")

    def print_payroll(self):
        """In b·∫£ng l∆∞∆°ng"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng in b·∫£ng l∆∞∆°ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")

    def print_analysis(self, analysis_type):
        """In ph√¢n t√≠ch"""
        messagebox.showinfo("Th√¥ng b√°o", f"Ch·ª©c nƒÉng in ph√¢n t√≠ch '{analysis_type}' s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")

    def export_payroll_pdf(self):
        """Xu·∫•t b·∫£ng l∆∞∆°ng ra PDF"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng xu·∫•t PDF s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")

    def load_salary_data(self):
        """Load d·ªØ li·ªáu l∆∞∆°ng ban ƒë·∫ßu"""
        try:
            # Load employee list for payroll tab
            self.load_employee_list()
        except Exception as e:
            print(f"Error loading salary data: {e}")
